diff -urp vmware-server-distrib/bin/vm-support vmware-server-distrib.bu/bin/vm-support
--- vmware-server-distrib/bin/vm-support	2009-10-21 03:48:34.000000000 +0200
+++ vmware-server-distrib.bu/bin/vm-support	2010-02-08 11:23:34.000000000 +0100
@@ -457,7 +457,7 @@ done
 runcmd "echo vm-support version: $VER" "/tmp/vm-support-version.$$.txt"
 runcmd "lspci -H1 -M" "/tmp/lspci1.$$.txt"
 runcmd "lspci -H1 -M -vn" "/tmp/lspci2.$$.txt"
-runcmd "/sbin/lsmod" "/tmp/modules.$$.txt"
+runcmd "/bin/lsmod" "/tmp/modules.$$.txt"
 runcmd "uname -a" "/tmp/uname.$$.txt"
 runcmd "df" "/tmp/df.$$.txt"
 runcmd "cat /etc/issue" "/tmp/issue.$$.txt"
diff -urp vmware-server-distrib/bin/vmware-config.pl vmware-server-distrib.bu/bin/vmware-config.pl
--- vmware-server-distrib/bin/vmware-config.pl	2009-10-21 03:48:34.000000000 +0200
+++ vmware-server-distrib.bu/bin/vmware-config.pl	2010-02-08 11:27:18.000000000 +0100
@@ -4285,75 +4285,6 @@ sub configure_module {
   my $name = shift;
   my $mod_dir;
 
-  if (defined($gDBAnswer{'ALT_MOD_DIR'})
-      && ($gDBAnswer{'ALT_MOD_DIR'} eq 'yes')) {
-    $mod_dir = db_get_answer('LIBDIR') . '/modules.new';
-  } else {
-    $mod_dir = db_get_answer('LIBDIR') . '/modules';
-  }
-
-  if ($gOption{'compile'} == 1
-      && can_build_module($name) eq 'yes') {
-    db_add_answer('BUILDR_' . $name, 'yes');
-  } else {
-    my @mod_list;
-
-    @mod_list = get_suitable_modules($mod_dir . '/binary');
-    while ($#mod_list > -1) {
-      my $candidate = shift(@mod_list);
-      my $modversion = shift(@mod_list);
-
-      # Note: When using the force flag,
-      #        Non-versioned modules can load into a     versioned kernel.
-      #            Versioned modules can load into a non-versioned kernel.
-      #
-      # Consequently, it is only safe to use the force flag if _both_ the
-      # kernel and the module are versioned.
-      # This is not always the case as demonstrated by bug 18371.
-      #
-      # I would stop using force flag immediately, it does nothing good.
-
-      if (try_module($name,
-                     $mod_dir . '/binary/' . $candidate . '/objects/'
-                     . $name . '.o',
-                        ($gSystem{'versioned'} eq 'yes')
-                     && ($modversion eq 'yes'), 1)) {
-        print wrap('The ' . $candidate . ' - ' . $name . ' module '
-                 . 'loads perfectly into the ' . 'running kernel.' . "\n\n", 0);
-        return 'yes';
-      }
-    }
-
-    if ($gOption{'prebuilt'} == 1) {
-      db_add_answer('BUILDR_' . $name, 'no');
-      print wrap('None of the pre-built ' . $name . ' modules for '
-		 . vmware_product_name() . ' is suitable for your '
-		 . 'running kernel.' . "\n\n", 0);
-      return 'no';
-    }
-
-    # No more building modules for 'ws' unless forced to.
-    if (vmware_product() eq 'ws' && !$gOption{'compile'}) {
-       # don't restart services at the end, no modules are installed
-       $gOption{'skip-stop-start'} = 1;
-       return 'yes';
-    }
-
-    if (can_build_module($name) ne "yes"
-	|| get_persistent_answer('None of the pre-built ' . $name . ' modules for '
-			      . vmware_product_name() . ' is suitable '
-                              . 'for your running kernel.  Do you want this '
-                              . 'program to try to build the ' . $name
-                              . ' module for your system (you need to have a '
-                              . 'C compiler installed on your system)?',
-                              'BUILDR_' . $name, 'yesno', 'yes') eq 'no') {
-      return 'no';
-    }
-  }
-
-  if (build_module($name, $mod_dir . '/source') eq 'no') {
-    return 'no';
-  }
   return 'yes';
 }
 
@@ -11217,19 +11148,19 @@ sub main {
    # this call MUST come after setupSymlinks (if setupSymlinks is deemed necessary)
    system_info();
 
-   if ($gOption{'tools-switch'} == 0) {
-      my @modules = non_vmware_modules_installed();
-      if (scalar(@modules) > 0) {
-         my $osVersion = direct_command(shell_string($gHelper{'uname'}) . ' -r');
-         chomp($osVersion);
-	 error("The following VMware kernel modules have been found on your " .
-	       "system that were not installed by the VMware Installer.  " .
-	       "Please remove them then run this installer again.\n\n" .
-	       join("\n", @modules) . "\n\n" .
-	       "I.e. - 'rm /lib/modules/" . $osVersion .
-	       "/misc/<ModuleName>.{o,ko}'\n\n");
-      }
-   }
+#   if ($gOption{'tools-switch'} == 0) {
+#      my @modules = non_vmware_modules_installed();
+#      if (scalar(@modules) > 0) {
+#         my $osVersion = direct_command(shell_string($gHelper{'uname'}) . ' -r');
+#         chomp($osVersion);
+#	 error("The following VMware kernel modules have been found on your " .
+#	       "system that were not installed by the VMware Installer.  " .
+#	       "Please remove them then run this installer again.\n\n" .
+#	       join("\n", @modules) . "\n\n" .
+#	       "I.e. - 'rm /lib/modules/" . $osVersion .
+#	       "/misc/<ModuleName>.{o,ko}'\n\n");
+#      }
+#   }
 
    if (vmware_product() eq 'ws' && $gOption{'make-all-net'}) {
       make_all_net();
@@ -11284,7 +11215,7 @@ sub main {
          error('Please shut down any running VMs and run this script again.' .
                "\n\n");
       } else {
-         if (system(shell_string(db_get_answer('INITSCRIPTSDIR') . '/vmware')
+         if (system(shell_string('/etc/rc.d' . '/vmware')
                     . ' stop')) {
             error('Unable to stop services for ' . vmware_product_name() .  "\n\n");
          }
@@ -11322,16 +11253,16 @@ sub main {
   }
 
   if (vmware_product() ne 'server') {
-    configure_mon();
+#    configure_mon();
     configure_vmci();
     configure_vsock();
-    configure_pp();
+#    configure_pp();
 
     if (vmware_product() eq 'wgs') {
 	configure_net();
     }
 
-    build_vmnet();
+#    build_vmnet();
   }
 
   if (isDesktopProduct()) {
@@ -11436,7 +11367,7 @@ sub main {
   db_save();
   # Then start VMware's services
   if (!$gOption{'skip-stop-start'}) {
-    system(shell_string(db_get_answer('INITSCRIPTSDIR') . '/vmware') . ' start');
+    system(shell_string('/etc/rc.d' . '/vmware') . ' start');
     print "\n";
   }
 
diff -urp vmware-server-distrib/bin/vmware-uninstall.pl vmware-server-distrib.bu/bin/vmware-uninstall.pl
--- vmware-server-distrib/bin/vmware-uninstall.pl	2009-10-21 03:48:27.000000000 +0200
+++ vmware-server-distrib.bu/bin/vmware-uninstall.pl	2010-02-08 11:23:33.000000000 +0100
@@ -3327,7 +3327,7 @@ sub uninstall {
   }
 
   if (defined($gDBAnswer{'INITSCRIPTSDIR'})
-      && db_file_in(db_get_answer('INITSCRIPTSDIR') . $service_name)) {
+      && file_name_exist(db_get_answer('INITSCRIPTSDIR') . $service_name)) {
 
   if ((isDesktopProduct()) || (isServerProduct())) {
       # Check that there are no VMs active else the server will fail to stop.
@@ -3345,7 +3345,7 @@ sub uninstall {
     my $status;
     # Stop the services
     print wrap('Stopping services for ' . vmware_product_name() . "\n\n", 0);
-    $status = system(shell_string(db_get_answer('INITSCRIPTSDIR')
+    $status = system(shell_string('/etc/rc.d'
                                   . $service_name) . ' stop') >> 8;
     if ($status) {
       if ($status == 2) {
@@ -4082,7 +4082,7 @@ sub uninstall_superserver {
 
 # Restart the inetd service
 sub restart_inetd {
-  my $inetd_restart = db_get_answer('INITSCRIPTSDIR') . '/inetd';
+  my $inetd_restart = '/etc/rc.d' . '/inetd';
   if (-e $inetd_restart) {
     if (!system(shell_string($inetd_restart) . ' restart')) {
       return;
@@ -4119,7 +4119,7 @@ sub uninstall_inetd {
 
 #Restart xinetd
 sub restart_xinetd {
-  my $xinetd_restart = db_get_answer('INITSCRIPTSDIR') . '/xinetd';
+  my $xinetd_restart = '/etc/rc.d' . '/xinetd';
   if (-e $xinetd_restart) {
     if (!system(shell_string($xinetd_restart) . ' restart')) {
       return;
diff -urp vmware-server-distrib/installer/services.sh vmware-server-distrib.bu/installer/services.sh
--- vmware-server-distrib/installer/services.sh	2009-10-21 03:48:36.000000000 +0200
+++ vmware-server-distrib.bu/installer/services.sh	2010-02-08 11:21:57.000000000 +0100
@@ -729,14 +729,14 @@ vmware_inVM() {
 #
 vmmonUseCount() {
    # Beware of module dependancies here. An exact match is important
-   /sbin/lsmod | awk 'BEGIN {n = 0;} {if ($1 == "'"$driver"'") n = $3;} END {print n;}'
+   /bin/lsmod | awk 'BEGIN {n = 0;} {if ($1 == "'"$driver"'") n = $3;} END {print n;}'
 }
 
 # Is a given module loaded?
 isLoaded() {
    local module="$1"
 
-   /sbin/lsmod | awk 'BEGIN {n = "no";} {if ($1 == "'"$module"'") n = "yes";} END {print n;}'
+   /bin/lsmod | awk 'BEGIN {n = "no";} {if ($1 == "'"$module"'") n = "yes";} END {print n;}'
 }
 
 # Build a Linux kernel integer version
@@ -786,7 +786,7 @@ vmware_run_vimsh_cmd() {
 }
 
 vmware_load_module() {
-   /sbin/insmod -s -f "/lib/modules/`uname -r`/misc/$1.o" || exit 1
+   /sbin/insmod -s -f "/lib/modules/`uname -r`/misc/$1.ko" || exit 1
    return 0
 }
 
diff -urp vmware-server-distrib/lib/net-services.sh vmware-server-distrib.bu/lib/net-services.sh
--- vmware-server-distrib/lib/net-services.sh	2009-10-21 03:48:27.000000000 +0200
+++ vmware-server-distrib.bu/lib/net-services.sh	2010-02-08 11:21:58.000000000 +0100
@@ -689,7 +689,7 @@ ipv4_broadcast() {
 isLoaded() {
    local module="$1"
 
-   /sbin/lsmod | awk 'BEGIN {n = "no";} {if ($1 == "'"$module"'") n = "yes";} END {print n;}'
+   /bin/lsmod | awk 'BEGIN {n = "no";} {if ($1 == "'"$module"'") n = "yes";} END {print n;}'
 }
 
 # Check if there is an IP route for a given subnet via a given interface
